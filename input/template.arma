# Model to use. Only one model can be specified (others are listed here as
# examples). Possible values:
# - AR
# - MA
# - ARMA
# - LH
# - plain_wave
model = AR {
	# Grid is defined by the no. of points along each dimension and the length
	# of the output wavy surface. It has the following format:
	#
	# 	out_grid = (npoints_t,npoints_x,npoints_y) : (length_t,length_x,length_y)
	#
	# If the length is omitted, it is automatically calculated
	# to make patch size of equal to 1 (i.e. length=npoints-1).
	# NB: No. of patches equals to the no. of points minus 1.
	out_grid = (200,40,40)

	# Verification scheme. Possible values:
	# - none (perform no output of the resulting wavy surface)
	# - summary (validate mean, variance and distributions of wave characteristics, default value)
	# - quantile (do everything from summary and write quantile plots to files)
	# - manual (write raw data to files)
	output = waves,acf,surface

	# The size of wavy surface partition. Each partition is computed
	# in parallel, given that all dependent partitions has been computed as well.
	# The smaller the size, the higher is parallelism. If partition size is not set 
	# or is invalid, the programme tries to guess optimal size based on the number
	# of threads and the number of coefficients in the model.
	#partition = (0,0,0)

	# ACF function.
	acf = {
		# ACF function approximation. Possible values:
		# - standing_wave
		# - propagating_wave
		func = standing_wave
		# Grid for ACF function approximations. The format is the same as for
		# out_grid.
		grid = (10,10,10) : (2.5,5,5)
	}
	# The algorithm of determining AR model coefficients. Possible values:
	# - gauss_elimination
	# - choi_recursive
	algorithm = choi_recursive
	# AR model order
	order = (7,7,7)
	# Whether seed PRNG or not.
	no_seed = 0
	# Non-linear inertialess transform.
	transform = nit {
		# Target distribution of wavy surface elevation. Possible values:
		# - gram_charlier
		# - skew_normal (WIP)
		distribution = gram_charlier {
			skewness=3.25
			kurtosis=2.4
		}
#		distribution = skew_normal {
#			mean=0
#			stdev=1
#			alpha=1
#		}
		# The no. of nodes for CDF interpolation.
		interpolation_nodes = 100
		# Max no. of coefficients for CDF interpolation.
		max_interpolation_order = 10
		# Max no. of coefficients for Gram---Charlier series expansion.
		max_expansion_order = 20
		cdf_solver = {
			# The size of the interval in distribution's sigma
			# on which CDF solver is run.
			interval = [-10,10]
		}
		acf_solver = {
			# The size of the interval on which ACF solver is run.
			interval = [-10,10]
		}
	}

}

# Moving average model configuration.
model = MA {
	out_grid = (200,40,40)
	output = waves,acf,surface
	acf = {
		func = propagating_wave
		grid = (20,10,10) : (10,5,5)
	}
	# MA model order
	order = (20,10,10)
	# Algorithm that determines MA coefficients. Possible values:
	# - fixed_point_iteration
	# - newton_raphson
	# As of 2016-08-16 newton_raphson is broken.
	algorithm = fixed_point_iteration
	# Maximal no. of iteration for the algorithm.
	max_iterations = 1000
	# Maximal difference between values of white
	# noise variance in successive iterations.
	eps = 1e-5
	# Maximal value of white noise variance considered to be nought.
	min_var_wn = 1e-6
	# Whether seed PRNG or not.
	no_seed = 0
	transform = none
}

# Velocity potential field formula and configuration.
velocity_potential_solver = linear {
	# Maximal wave number for each spatial dimension.
#	# Defines a range from (0,0) to wnmax over which 
	# integration is done.
#	wnmax = from (0,0) to (0,0.25) npoints (2,2)
	# Water depth.
	depth = 10
	# A compound range of t and z coordinates over which to compute
	# velocity potentials. Z lower bound must be greater
	# than water depth to make calculations precise, and
	# z upper bound should be greater or equal maximal wavy
	# surface elevation to compute potentials inside waves.
	domain = from (10,-5) to (10,4) npoints (1,10)
}

